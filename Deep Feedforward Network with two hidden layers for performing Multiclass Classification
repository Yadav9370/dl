#pip install keras scikit-learn numpy

from keras.models import Sequential
from keras.layers import Dense
from keras.utils import to_categorical
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import numpy as np


iris = load_iris()
X = iris.data
y = iris.target

# One-hot encode the labels
y = to_categorical(y)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the number of input features, hidden units, and output classes
n_inputs = X.shape[1]
n_hidden1 = 256
n_hidden2 = 128
n_outputs = y.shape[1]

# Create the model
model = Sequential()
model.add(Dense(n_hidden1, activation='relu', input_shape=(n_inputs,)))
model.add(Dense(n_hidden2, activation='relu'))
model.add(Dense(n_outputs, activation='softmax'))


# Compile the model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=10, batch_size=128, validation_data=(X_test, y_test))

# Make predictions on the test data
y_pred = model.predict(X_test)

# Get the predicted class labels
y_pred_class = np.argmax(y_pred, axis=1)

# Evaluate the model
accuracy = accuracy_score(np.argmax(y_test, axis=1), y_pred_class)
print('Test accuracy:', accuracy)

