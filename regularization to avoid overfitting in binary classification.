import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
# Load the MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()
# Reshape the data to flatten each image (28x28 -> 784)
x_train = x_train.reshape(-1, 784)
x_test = x_test.reshape(-1, 784)
# Normalize the data (pixel values from 0 to 255 are scaled between 0 and 1)
x_train = x_train / 255.0
x_test = x_test / 255.0
# Convert the labels to one-hot encoding with 10 classes (for digits 0-9)
y_train = tf.keras.utils.to_categorical(y_train, 10)
y_test = tf.keras.utils.to_categorical(y_test, 10)
# Define the model
model = Sequential()
model.add(Dense(64, activation='relu', input_shape=(784,)))
model.add(Dropout(0.2))  # Dropout regularization to prevent overfitting
model.add(Dense(32, activation='relu'))
model.add(Dropout(0.2))  # Dropout regularization
model.add(Dense(10, activation='softmax'))  # Output layer for 10 classes (digits 0-9)
# Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',  # Loss function for multiclass classification
              metrics=['accuracy'])
# Define the L2 regularization term
regularizer = tf.keras.regularizers.l2(0.01)
# Add the L2 regularization term to each Dense layer
for layer in model.layers:
    if isinstance(layer, Dense):
        layer.kernel_regularizer = regularizer
        layer.bias_regularizer = regularizer
# Train the model
model.fit(x_train, y_train, epochs=10, batch_size=128, validation_data=(x_test, y_test))
# Evaluate the model on test data
loss, accuracy = model.evaluate(x_test, y_test)
print('Test accuracy:', accuracy)
